Generate a goal plan in JSON format for the following goal and description: <goal>, <description>.
The structure should include the goal name, a list of tasks.
Format your response exactly like the example below:

{
  "goal_name": "<goal>",
  "goal_description": "<description>"
  "tasks_to_goal": [
    "task_1", 
    "task_2" 
  ]
}

Please ensure the JSON is valid and easy to parse. Only include the response in JSON format with no extra text.

```python
# views.py
import json
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
import openai

openai.api_key = 'your_openai_api_key_here'

@csrf_exempt
def generate_goal_plan(request):
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            goal = data.get('goal')
            description = data.get('description')
            if not goal or not description:
                return JsonResponse({'error': 'Missing goal or description'}, status=400)

            prompt = f"""Generate a goal plan in JSON format for the following goal and description: {goal}, {description}.
The structure should include the goal name, a list of tasks.
Format your response exactly like the example below:

{{
  "goal_name": "<goal>",
  "goal_description": "<description>",
  "tasks_to_goal": [
    "task_1", 
    "task_2" 
  ]
}}

Please ensure the JSON is valid and easy to parse. Only include the response in JSON format with no extra text."""

            response = openai.ChatCompletion.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=300
            )

            content = response.choices[0].message.content.strip()

            # Try to parse the JSON from the model output to verify validity
            goal_plan = json.loads(content)

            return JsonResponse(goal_plan)
        except json.JSONDecodeError:
            return JsonResponse({'error': 'Invalid JSON returned by the model', 'raw_response': content}, status=500)
        except Exception as e:
            return JsonResponse({'error': str(e)}, status=500)

    return JsonResponse({'error': 'Invalid HTTP method'}, status=405)
```

**How to use:**

1. Add the above view to your Django app.
2. Map it in `urls.py`:

```python
from django.urls import path
from .views import generate_goal_plan

urlpatterns = [
    path('api/generate-goal-plan/', generate_goal_plan, name='generate_goal_plan'),
]
```

3. Send a POST request with JSON body:

```json
{
  "goal": "Learn Python programming",
  "description": "I want to master Python for data analysis and automation."
}
```

4. The response will be a valid JSON goal plan generated by the model.

---

If you want, I can help you with a full Django example or a client-side example to call this API.
